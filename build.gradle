buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
                maven {
                        url "https://plugins.gradle.org/m2/"
                }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

group = 'springio'



apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'
apply plugin: 'com.palantir.docker'

jar {
        baseName = 'mybankatm'
        version = '0.0.1'
}

docker {
    dependsOn build
    name "indragopi86/${jar.baseName}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

repositories {
    mavenCentral()
}

sourceCompatibility = javacompatibility
targetCompatibility = javacompatibility

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web-services')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('io.springfox:springfox-swagger2:2.4.0')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.apache.commons:commons-lang3:3.7')
    compile('io.springfox:springfox-swagger-ui:2.8.0')
    compile('io.springfox:springfox-swagger2:2.8.0')
        compile('org.sonarsource.java:sonar-java-plugin:3.13.1')
        compile('org.sonarsource.sonarqube:sonar-scanner-engine:5.5-RC2')

    runtime('com.h2database:h2')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.mockito:mockito-core:2.18.0')
    testCompile group: 'junit', name: 'junit', version: '4.+'

}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
jacocoTestCoverageVerification {
     violationRules {
          rule {
               limit {
                    minimum = 0.2
               }
          }
     }
  }
task applicationCodeCoverageReport(type:JacocoReport){
        executionData test
        sourceSets sourceSets.main
	}
}
